name: Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - 'master' 
    paths:
      - '**.hpp'
      - '**.cpp'
      - '**.h'
      - '**.c'
      - '**CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    branches:
      - 'master'
    paths:
      - '**.hpp'
      - '**.cpp'
      - '**.h'
      - '**.c'
      - '**CMakeLists.txt'
      - '.github/workflows/build.yml'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-24.04]
        build-type: [Debug, Release]
        include:
          - os: windows-latest
            cmake-args: '-AWin32 -Thost=x86 -DGH_ACBUILD=TRUE  -DUSING_BOOST_NO_CONAN=TRUE -DUSING_OPENSSL_NO_CONAN=TRUE -DBoost_NO_BOOST_CMAKE=ON'
          - os: ubuntu-24.04
            cmake-args: '-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32 -DGH_ACBUILD=TRUE'

    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_BUILD_PARALLEL_LEVEL: 2

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set env
      run: echo "REPO_TAG=$(git describe --tags --always)" >> $GITHUB_ENV
      shell: bash
    
    - name: get-cmake
      uses: lukka/get-cmake@latest

    - if: runner.os == 'Windows'
      name: Install boost
      run: |
          choco install boost-msvc-14.3 --version=1.82.0 --force

    - if: runner.os == 'Windows'
      name: Set boost env
      run: echo "BOOST_ROOT=C:\\ProgramData\\chocolatey\\lib\\boost-msvc-14.3" >> $GITHUB_ENV
      shell: bash

    - if: runner.os == 'Windows'
      name: Install openssl
      run: choco install openssl --forcex86 | out-null
      
    - if: runner.os == 'Windows'
      name: Setup openssl envvar
      run: echo "OPENSSL_ROOT=C:\\Program Files (x86)\\OpenSSL-Win32" >> $GITHUB_ENV
      
    - if: runner.os == 'Linux'
      name: Install gcc/g++-multilib
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt install gcc-multilib g++-multilib libstdc++6:i386 libc6-dev:i386

    - name: Get python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install conan
      run: |
        python -m pip install --upgrade pip
        pip install conan
        conan remote add conan-transit-legacy https://api.bintray.com/conan/conan/conan-transit

    - name: Generate build files
      run: mkdir build && cd build && cmake .. ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DDCC_VERSION="${{ env.REPO_TAG }}" -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DOPENSSL_ROOT=${{ env.OPENSSL_ROOT }}

    - if: runner.os == 'Windows'
      name: Build Windows
      run: cd build && cmake --build . --config ${{ matrix.build-type }}

    - if: runner.os == 'Linux'
      name: Build Linux
      run: cd build && cmake --build .
      

    - name: Zip artifact
      run: Compress-Archive ${{ runner.workspace }}/samp-discord-connector/build/artifact/* ${{ runner.workspace }}/samp-discord-connector/build/artifact/discord-connector-${{ env.REPO_TAG }}-${{ runner.os }}-${{ matrix.build-type }}.zip
      shell: pwsh
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: discord-connector-${{ env.REPO_TAG }}-${{ runner.os }}-${{ matrix.build-type }}
        path: ${{ runner.workspace }}/samp-discord-connector/build/artifact/discord-connector-${{ env.REPO_TAG }}-${{ runner.os }}-${{ matrix.build-type }}.zip